const express = require("express");
const dotenv = require("dotenv");
const twilio = require("twilio");
const path = require("path");
const companies = require("./data/companies.json");

dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

app.use(express.urlencoded({ extended: true }));

// ЁЯУЮ Voice Entry Point
app.post("/voice", (req, res) => {
  console.log("ЁЯУЮ Incoming call received at /voice");
  const twiml = new twilio.twiml.VoiceResponse();

  try {
    const gather = twiml.gather({
      input: "dtmf",
      numDigits: 6,
      action: "/process-code",
      method: "POST",
      timeout: 10,
    });

    gather.say(
      { voice: "Polly.Aditi" },
      "рдирдорд╕реНрддреЗ! рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдХрдВрдкрдиреА рдХрд╛ 6 рдЕрдВрдХреЛрдВ рдХрд╛ рдХреЛрдб рдЯрд╛рдЗрдк рдХрд░реЗрдВ рдФрд░ рд╣реИрд╢ рджрдмрд╛рдПрдВред"
    );

    twiml.say(
      { voice: "Polly.Aditi" },
      "рдЖрдкрдиреЗ рдХреЛрдИ рдЗрдирдкреБрдЯ рдирд╣реАрдВ рджрд┐рдпрд╛ред рдХреГрдкрдпрд╛ рдХреБрдЫ рджреЗрд░ рдмрд╛рдж рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    );

    res.type("text/xml");
    res.send(twiml.toString());
  } catch (err) {
    console.error("тЭМ Error in /voice:", err.message);
    res.status(500).send("Internal Server Error");
  }
});

// ЁЯУж Code Processing
app.post("/process-code", (req, res) => {
  console.log("ЁЯУи Received digits at /process-code:", req.body.Digits);
  const code = req.body.Digits;
  const twiml = new twilio.twiml.VoiceResponse();

  try {
    if (!code || code.length !== 6) {
      console.warn("тЪая╕П Invalid code input:", code);
      twiml.say(
        { voice: "Polly.Aditi" },
        "рдХреЛрдб рдЕрдорд╛рдиреНрдп рд╣реИред рдХреГрдкрдпрд╛ 6 рдЕрдВрдХреЛрдВ рдХрд╛ рд╕рд╣реА рдХреЛрдб рдбрд╛рд▓реЗрдВред"
      );
    } else {
      const match = companies.payload.data.find((c) => c.society_code === code);
      console.log("ЁЯФН Matching company:", match);

      if (match) {
        const amcAmount = parseFloat(match.amc || "0");
        const billAmount = match.bill_amount || "0";

        const amcMessage =
          amcAmount > 0
            ? `рдЖрдкрдХрд╛ AMC тВ╣${amcAmount} рднрд░рд╛ рдирд╣реАрдВ рдЧрдпрд╛ рд╣реИ, рдХреГрдкрдпрд╛ рд╢реАрдШреНрд░ рднрд░реЗрдВред`
            : `рдЖрдкрдХрд╛ AMC рдкрд╣рд▓реЗ рд╣реА рднрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рдзрдиреНрдпрд╡рд╛рджред`;

        const msg = `рдЖрдкрдХреА рдХрдВрдкрдиреА рдХрд╛ рдирд╛рдо рд╣реИ ${match.society_name}, рд╕реЗрдХреНрд░реЗрдЯрд░реА рд╢реНрд░реА ${match.sec_name}, рдЬрд╝рд┐рд▓рд╛ ${match.district_name}, рддрд╛рд▓реБрдХрд╛ ${match.taluka_name}, рдЧрд╛рдБрд╡ ${match.city_name}ред ${amcMessage} рдмрд┐рд▓ рд░рд╛рд╢рд┐ тВ╣${billAmount} рд╣реИред`;

        twiml.say({ voice: "Polly.Aditi" }, msg);
      } else {
        twiml.say(
          { voice: "Polly.Aditi" },
          `рдХреЛрдб ${code} рд╕реЗ рдХреЛрдИ рдХрдВрдкрдиреА рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рд╕рд╣реА рдХреЛрдб рдбрд╛рд▓реЗрдВред`
        );
      }
    }

    res.type("text/xml");
    res.send(twiml.toString());
  } catch (err) {
    console.error("тЭМ Error in /process-code:", err.message);
    res.status(500).send("Internal Server Error");
  }
});

// ЁЯЪА Start server and update webhook
app.listen(port, () => {
  console.log(`тЬЕ Server running on http://localhost:${port}`);

  const client = twilio(
    process.env.TWILIO_ACCOUNT_SID,
    process.env.TWILIO_AUTH_TOKEN
  );

  // You can change this to dynamic localtunnel or ngrok detection if needed
  const voiceUrl = process.env.VOICE_WEBHOOK_URL || `https://upset-laws-march.loca.lt/voice`;
  console.log("ЁЯМР Using voice webhook URL:", voiceUrl);

  client.incomingPhoneNumbers
    .list()
    .then((numbers) => {
      const match = numbers.find(
        (n) => n.phoneNumber === process.env.TWILIO_PHONE_NUMBER
      );
      if (!match) throw new Error("тЪая╕П Twilio phone number not found.");
      console.log("тЬЕ Twilio phone number matched:", match.phoneNumber);
      return client.incomingPhoneNumbers(match.sid).update({
        voiceUrl,
        voiceMethod: "POST",
      });
    })
    .then(() => console.log(`ЁЯФБ Twilio webhook updated to ${voiceUrl}`))
    .catch((err) =>
      console.error("тЭМ Error updating Twilio webhook:", err.message)
    );
});
